## Modificadores de acceso
snippet po "protected" b
protected ${0}
endsnippet
snippet pu "public" b
public ${0}
endsnippet
snippet pr "private" b
private ${0}
endsnippet

## Anotaciones
snippet before "before" b
@Before
static void ${1:intercept}(${2:args}) { ${0} }
endsnippet
snippet mm "@ManyToMany" b
@ManyToMany
${0}
endsnippet
snippet mo "@ManyToOne" b
@ManyToOne
${0}
endsnippet
snippet om "@OneToMany" b
@OneToMany${1:(cascade=CascadeType.ALL)}
${0}
endsnippet
snippet oo "@OneToOne" b
@OneToOne
${1}
endsnippet

## Librerias más utilizadas
snippet im "import $1" b
import $1
endsnippet
snippet jb "import java.beans.$1" b
import java.beans.$1
endsnippet
snippet js "import javax.swing.$1" b
import javax.swing.$1
endsnippet
snippet jt "import java.text.$1" b
import java.text.$1
endsnippet
snippet ji "import java.io.$1" b
import java.io.$1
endsnippet
snippet jm "import java.math.$1" b
import java.math.$1
endsnippet
snippet jn "import java.net.$1" b
import java.net.$1
endsnippet
snippet ju "import java.util.$1" b
import java.util.$1
endsnippet

## JavaClass
snippet javaclass "Template JavaClass" b
package ${1:mundo}.`vim_snippets#Filename("$1")`;

public class `vim_snippets#Filename("$1")` {
	/* Atributos */
	$2

	/* Constructor */
		public `vim_snippets#Filename("$1")`() {
			this.$3 = $3;
		}
	
	/* Métodos */
	$4
}
endsnippet

## JavaMainClass
snippet javamainclass "Template JavaMainClass" b
package ${1:mundo}.`!v vim_snippets#Filename`;

${3://import java libraries}

/**
  *@author Josué Romero
	*@date `!v strftime("%e/%m/%Y" - "%R")` COL
*/
public class ${1:`vim_snippets#Filename("$1")`} {
	
	public static void main (String[] args) {
		${2:¡Empieza a Codear!}
		${4}
	}
}
endsnippet

## Class
snippet pcl "public class nameClass {}" b
public class `vim_snippets#Filename("$1")` {
	$1
}
endsnippet
snippet cl "public class nameClass {}" b
class `vim_snippets#Filename("$1")` {
	$1
}
endsnippet
snippet in "interface" b
interface `vim_snippets#Filename("$1")` ${2:extends Parent}
endsnippet
snippet tc "public class daughterClass extends parentClass" b
public class `vim_snippets#Filename("$1")` extends ${0:TestCase}
endsnippet

## Constructor


## Métodos Getters y Setters


## Class Enhancements
snippet ext "extends" b
extends ${0}
endsnippet
snippet imp "implements" b
implements ${0}
endsnippet

## JavaDoc
snippet /* "JavaDoc" b
/*
	* @see ${1:short description}
	* @author Josué Romero
*/
endsnippet

## Constantes
snippet co "static public final dataType nameVar = value;" b
static public final ${1:String} ${2:var} = ${3};
endsnippet
snippet cos "static public final String nameVar = 'vaue';" b
static public final String ${1:var} = "${2}";
endsnippet
snippet fi "final" b
final $1
endsnippet

## Estructuras de condicionales
snippet case "case" b
case $1: $2
	break;
endsnippet
snippet def "default" b
default:
		${1:System.err.println("ERROR. Debe ingresar un valor válido.")}
endsnippet
snippet el "else" b
else {
	$1
}$2
endsnippet
snippet eif "else if () { $2 }" b
else if ($1) {
	$2
}$3
endsnippet
snippet if "if" b
if (${1:condition}) {
	$2
}$3
endsnippet

## Estructura de bucles
snippet for "for" b
for (int i = ${1:0}; i < ${2:var}; i++) {
	$3
}$4
endsnippet
snippet fore "fore" b
for (${1:int} e : ${2:array}) {
	$3
}$4
endsnippet
snippet wh "while" b
while (${1:condition}) {
	$2
}$3
endsnippet
snippet do "do while" b
do {
	$1
} while (${2:condition});$3
endsnippet


## Estructura de método
snippet m "template for method" b
public ${1:void} ${2:nameMethod}(${3}) ${4}
endsnippet

## Declaración de atributos o variables
snippet attribute "" b
${1:String} ${2:var}${3: = null}${4};
endsnippet

## Declaración de ArrayList
snippet d.al "" b
List<${1:Object}> ${2:list} = new ArrayList<$1>();${0}
endsnippet
## Declaración de HashMap
snippet d.hm "" b
Map<${1:Object}, ${2:Object}> ${3:map} = new HashMap<$1, $2>();${0}
endsnippet
## Declaración de HashSet
snippet d.hs "" b
Set<${1:Object}> ${2:set} = new HashSet<$1>();${0}
endsnippet
## Declaración de Stack
snippet d.st "" b
Stack<${1:Object}> ${2:stack} = new Stack<$1>();${0}
endsnippet

## Plantilla para el patron de diseño Singleton
snippet singleton "" b
private static class Holder {
	private static final ${1:`vim_snippets#Filename("$1")`} INSTANCE = new $1();
}

	private $1() { }

public static $1 getInstance() {
	return Holder.INSTANCE;
}
endsnippet

## Mejoras a Métodos, variables, clases, etc
snippet ab "" b
abstract ${0}
endsnippet
snippet fi "" b
final ${0}
endsnippet
snippet st "" b
static ${0}
endsnippet
snippet sy "" b
synchronized ${0}
endsnippet

## Métodos para identificar un error
snippet err "" b
System.err.print("${0:Message}");
endsnippet
snippet errf "" b
System.err.printf("${1:Message}", ${0:exception});
endsnippet
snippet errln "" b
System.err.println("${0:Message}");
endsnippet

## Manejo de excepciones
snippet as "" b
assert ${1:test} : "${2:Failure message}";
endsnippet
snippet ae "" b
assertEquals("${1:Failure message}", ${2:expected}, ${3:actual}); snippet aae
assertArrayEquals("${1:Failure message}", ${2:expecteds}, ${3:actuals});
endsnippet
snippet af "" b
assertFalse("${1:Failure message}", ${2:condition});
endsnippet
snippet at "" b
assertTrue("${1:Failure message}", ${2:condition});
endsnippet
snippet an "" b
assertNull("${1:Failure message}", ${2:object});
endsnippet
snippet ann "" b
assertNotNull("${1:Failure message}", ${2:object});
endsnippet
snippet ass "" b
assertSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet asns "" b
assertNotSame("${1:Failure message}", ${2:expected}, ${3:actual});
endsnippet
snippet fa "" b
fail("${1:Failure message}");
endsnippet
snippet ca "" b
catch(${1:Exception} ${2:e}) ${0}
endsnippet
snippet thr "" b
throw ${0}
endsnippet
snippet ths "" b
throws ${0}
endsnippet
snippet try "" b
try {
	${0:${VISUAL}}
	} catch(${1:Exception} ${2:e}) {
}
endsnippet
snippet tryf "" b
try {
	${0:${VISUAL}}
} catch(${1:Exception} ${2:e}) {
} finally {
}
endsnippet

## Buscar métodos
snippet findall "" b
List<${1:listName}> ${2:items} = $1.findAll();
endsnippet
snippet findbyid "" b
${1:var} ${2:item} = $1.findById(${3});
endsnippet

## Javadocs
snippet doc "" b
/**
  * ${0}
*/
endsnippet
snippet @au "" b
@author `system("grep \`id -un\` /etc/passwd | cut -d \":\" -f5 | cut -d \",\" -f1")`
endsnippet
snippet @b "" b
@brief ${0:Description}
endsnippet
snippet @fi "" b
@file ${0:`vim_snippets#Filename("$1")`}.java
endsnippet
snippet @pa "" b
@param ${0:param}
endsnippet
snippet @re "" b
@return ${0:param}
endsnippet

## Métodos registrador
snippet debug "" b
Logger.debug(${1:param});
endsnippet
snippet error "" b
Logger.error(${1:param});
endsnippet
snippet info "" b
Logger.info(${1:param});
endsnippet
snippet warn "" b
Logger.warn(${1:param});
endsnippet

## Método principal
snippet main "Método principal" b
public static void main (String[] args) {
	${0}
}
endsnippet

## Métodos para imprimir por consola
snippet s "" b
System.out.printl("$1");
endsnippet
snippet ss "" b
System.out.println("$1");
endsnippet
snippet sse "" b
System.err.println("$1");
endsnippet
snippet st "" b
System.out.print("${0:Message}");
endsnippet
snippet sf "" b
System.out.printf("${1:Message}", ${0:args});
endsnippet
snippet ssa "" b
System.out.println(Arrays.toString(${0}));
endsnippet

## Procesamiento de métodos
snippet ren "" b
render(${1:param});
endsnippet
snippet rena "" b
renderArgs.put("${1}", ${2});
endsnippet
snippet renb "" b
renderBinary(${1:param});
endsnippet
snippet renj "" b
renderJSON(${1:param});
endsnippet
snippet renx "" b
renderXml(${1:param});
endsnippet

## Setter and Getter Methods
snippet set "" b
public void set${0:}(${1:String} ${1:}) {
	this.$4 = $4;
}
endsnippet
snippet get "" b
public ${1:String} get${2:}() {
	return this.$0;
}
endsnippet

## Terminate Methods or Loops
snippet re "" b
return ${0}
endsnippet
snippet b "" b
break;
endsnippet

## Test Methods
snippet t "" b
public void test${1:Name}() throws Exception {
	${0}
}
endsnippet
snippet test "" b
@Test
public void test${1:Name}() throws Exception {
	${0}
}
endsnippet

## Miscellaneous
snippet action "" b
public static void ${1:index}(${2:args}) { ${0} }
endsnippet
snippet rnf "" b
notFound(${1:param});
endsnippet
snippet rnfin "" b
notFoundIfNull(${1:param});
endsnippet
snippet rr "" b
redirect(${1:param});
endsnippet
snippet ru "" b
unauthorized(${1:param});
endsnippet
snippet unless "" b
(unless=${1:param});
endsnippet

